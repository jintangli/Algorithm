https://www.youtube.com/watch?v=HvGkzDT2ffI&index=14&list=PLnfg8b9vdpLn9exZweTJx44CII1bYczuk
-Marty Stepp

cs 106B, Lecture 10 Exhaustive Search and Backtracking

Exhaustive Search
	exhaustive search: Exploring *every possible *combination from a set of choices or values
		
		- **often implemented recursively
			**recursion is good at *exploring down *different paths using recursive calls

		applications:
			- producing all permutations of a set of values
			- enumerating all possible names, passwords, etc
			- combinatoric and logic programming
			
	A general pseudo-code algorithm for exhaustive search
		
		search( decision ):
			- if there are no more decisions to make: Stop
			- else, let's handle one decision ourselves, and the rest by recursion
			  for each available choice C for this decision:
				- choose C
				- search the remaining decisions that could follow C
				
		often the search space consists of many decisions, each of which has several available choices
			- example: when enumerating all 5-letter strings, each of the 5 letters is a decision
					   and each of those decisions has 26 possible choices
					   
	Exercise: printBinary
		write a recursive function printBinary that accepts an integer number of digits 
		and prints all binary numbers that have exactly that many digits, 
		in ascending order, one per line
		
		printBinary(2): 00, 01, 10, 11,
		printBinary(3): 000, 001, 010, 011, 100, 101, 110, 111
		
		- **how is this problem self-similar (recursive)?
		
		difficult to use for loop
			number of digits decides number of for loops
			can NOT find out the number of digits ahead of time
			
	first try
		
		void printBinary(int digits){
			if(digits == 1){
				printLine("0");
				printline("1");
			}else{
				print(0);
				printBinary(digits - 1);
				
				print(1);
				printBinary(digits - 1);
			}
		}
		
		problem: only portion of the expective output is printed
		reason: print(0) prints *one output
				print(digits -1) prints *multiple output
					need to insert print(0) in front of each of print(digits-1)
		
		**Jin: as we are going to down to the next recursive call, we need to 
			let need to let the recursive call know what decisions we have made so far.
			This can be accomplished by passing decisions we have made as *parameters into
			the next recursive call. 
		
	Helper functions
		if the required function does NOT accept the parameters you need:
			- write a helper function that accepts more parameters
			- extra parameters can represent *current state, choices made, etc.
		
		returnType functionName(params){
			...
			return helper(params, moreParams);
		}
		
		returnType helper(params, moreParams){
			...
		}
		
	correct code
		
		void printBinary(int digits, String prefix = ""){
			printline("printBinary(" + digits, + ", " + prefix + " )");	
			if(digits==0){
				printline(prefix);
			}else{
				printBinary(digits-1, prefix+"0");
				printBinary(digits-1, prefix+"1")
			}
		
		}
		
		**prefix gets bigger as we goes down to the recursive calls
		**prefix is important idea 
			it remembers a set of choices we before the current call
	
		**in each recursive iteration, we will do our work on top of 
		  prefix which is done by previous calls, put them together and pass
		  it down to the next recursive call
		**digits param represents how many digits are left to be accounted for.
		  in the end of all recursive calls, 0 digits are left and prefix holds everything
		
		**to understand the recursive calls, put a print statement in the *beginning of recursion call
		

	code for printDecimal
		
		void printDecimal(int digits, String prefix = ""){
			printline("printDecimal(" + digits, + ", " + prefix + " )");	
			if(digits==0){
				printline(prefix);
			}else{
				for(int i=0; i<=9; i++){
					printDecimal(digits-1, prefix + toString(i));
				}
			}
		
		}
		
		**loop within recursion
			loop iterates through list of choices in current iteration/decision
			recursion moves down to the next iteration/decision
		
		
	Dice rolls
		write a recursive function diceRoll that accepts an integer representing a number
		of 6-sided dice to roll, and output all possible conbinations fo values that could
		appear on the dice.
		
		- **how is this problem recursive (self-similar)?
			each call is making a decision which is doing one chunk of the work
			
		want to generate all possible sequence of values
			for(each possible first die value):
				for(each possible second die value):
					for(each possible third die value):
						...
		
		this is called a depth first search
			
		does NOT know how many for loops are needed
		
	
	** Backtracking
		finding solutions by trying partial solutions and then *abandoning them if they are NOT suitable
		
			- **a "brute force" algorithm technique (tries all paths)
			- often implemented recursively
		
		applications:
			- producing all permutations of a set of values
			- parsing languages
			- games: anagrams, swords, word jumbles, 8 queens
			- conbinatoric and logic programming
			- escaping from a maze
			
		** a general pseudo-code algorithm for backtracking problems:
			
			explore(decisions):
				- if there are no more decisions to make: stop
				-else, let's handle one decision ourselves, and the rest by recursion 
				for each available choice C for this decision:
					- choose C
					- explore the remaining choices that could follow C
					- **un-choose C (backtrack!)
			
		diceRolls pseudo-code:
			
			diceRolls(dice):
				if dice == 0:
					nothing to do
				else:
					//handle all roll values for a single die: let recursion do the rest
					for each die value i in range[1..6]:
						choose thast the current die will have value idea
						diceRolls(dice-1)
						un-choose the value i
						
			- *how do we keep track of our choices?
			
		correct code:
			
			void diceRolls(int dice){
				//array need to be reachable by all recursive calls
				Integer[] chosen = Integer[dice];
				diceHelper(dice, chosen, 0);
			}
			
			void diceHelper(int dice, int[] chosen, int level=0){
				if (dice == 0){
					//base case, print out chosen array
					for(int i=0; i<= level; ++i){
						print(i);
					}
					printline("")
				}else{
					//some dice left to roll
					//handle one die in current recursive call
					
					//for each value that die could have
					for (int i = 1; i<=6; i++){
						//	choose
						chosen[level] = i;
						//	explore
						diceHelper(dice-1, chosen, ++level);
						//	unchoose
						--level;
						chosen[level] = null;
					}
				}
			}
			
	Dice roll sum
		write a function diceSum similar to diceRoll, but it also accepts a desired sum
		and prints only conbinations that add up to exactly that sum
		
			void diceHelper(int dice, int[] chosen, int sum, int sumSoFar int level=0){
				
				if (dice == 0 and sum == sumSoFar){
					//base case, print out chosen array
					printArray(chosen);
				}else{
					//some dice left to roll
					//handle one die in current recursive call
					
					//too high or too low
					int diff = sum-sumSoFar;
					if( diff <= 0 || diff > (dice*6) ){
						return;
					}else{
					//for each value that die could have
						for (int i = 1; i<=6; i++){
							//	choose
							chosen[level] = i;
							
							//	explore
							sumSoFar = sumSoFar + i;
							diceHelper(dice-1, chosen, sum, sumSoFar,  ++level);
							
							//	unchoose
							--level;
							sum = sum + i;
							chosen[level] = null;
						}
					}
				}
			}
			
		**if a function does NOT have the list of parameters we wish to have,
		  which is common in recursion, then create a helper method that takes
		  the parameters we want.
		  
		**in the case of *backtracking, the extra parameters we are adding are meant
     	  to remember things that we have chosen on previous calls.
		
		**adding sum parameter as part of guiding computation
		
		
		  
	